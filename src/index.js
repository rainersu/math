var requirejs = require('requirejs');
requirejs.config({
	nodeRequire : require
});
requirejs([
	'./var/num',
	'./var/math',
	'./var/arith',
	'./var/cp',
	'./const/EPSILON',
	'./const/GOLDEN_RATIO',
	'./const/MAX_SAFE_INTEGER',
	'./const/MIN_SAFE_INTEGER',
	'./number/isNaN',
	'./number/isNumber',
	'./number/isNumeric',
	'./number/isFinite',
	'./number/isInteger',
	'./number/isSafeInteger',
	'./number/isComposite',
	'./number/isPrime',
	'./number/isEven',
	'./number/isOdd',
	'./number/toInteger',
	'./number/toDecimal',
	'./number/toFixed',
	'./number/toOrdinal',
	'./calc/cycle',
	'./calc/limit',
	'./calc/acosh',
	'./calc/cosh',
	'./calc/asinh',
	'./calc/sinh',
	'./calc/atanh',
	'./calc/tanh',
	'./calc/cbrt',
	'./calc/root',
	'./calc/clz32',
	'./calc/expm1',
	'./calc/hypot',
	'./calc/imul',
	'./calc/iadd',
	'./calc/log1p',
	'./calc/log10',
	'./calc/log2',
	'./calc/average',
	'./calc/round10',
	'./calc/floor10',
	'./calc/ceil10',
	'./calc/factorial',
	'./calc/fibonacci',
	'./mod/memoize',
	'./mod/guid',
	'./mod/random10'
],
function(
	num,
	math,
	Arith,
	cp,
	EPSILON,
	GOLDEN_RATIO,
	MAX_SAFE_INTEGER,
	MIN_SAFE_INTEGER,
	isnan,
	isNumber,
	isNumeric,
	isfinite,
	isInteger,
	isSafeInteger,
	isComposite,
	isPrime,
	isEven,
	isOdd,
	toInteger,
	toDecimal,
	toFixed,
	toOrdinal,
	cycle,
	limit,
	acosh,
	cosh,
	asinh,
	sinh,
	atanh,
	tanh,
	cbrt,
	root,
	clz32,
	expm1,
	hypot,
	imul,
	iadd,
	log1p,
	log10,
	log2,
	average,
	round10,
	floor10,
	ceil10,
	factorial,
	fibonacci,
	memoize,
	guid,
	random10
) {'use strict';

var c = 'MAX_VALUE,MIN_VALUE,NEGATIVE_INFINITY,POSITIVE_INFINITY,parseFloat,parseInt'.split(','), l, i;
for(l = c.length; l--;) Arith[i = c[l]] =  num[i];
c = 'E,LN10,LN2,LOG10E,LOG2E,PI,SQRT1_2,SQRT2,abs,acos,asin,atan,atan2,cos,exp,fround,log,max,min,pow,sign,sin,sqrt,tan,trunc'.split(',');
for(l = c.length; l--;) Arith[i = c[l]] = math[i];
c = 'toExponential,toPrecision,toString'.split(',');
for(l = c.length; l--;)(function (i) {
	Arith[i] = function (n, x) {
		return num.prototype[i].call(n, x);
	};
})(c[l]);

cp(Arith, {
	EPSILON          : EPSILON,
	GOLDEN_RATIO     : GOLDEN_RATIO,
	MAX_SAFE_INTEGER : MAX_SAFE_INTEGER,
	MIN_SAFE_INTEGER : MIN_SAFE_INTEGER,
	isNaN            : isnan,
	isNumber         : isNumber,
	isNumeric        : isNumeric,
	isFinite         : isfinite,
	isInteger        : isInteger,
	isSafeInteger    : isSafeInteger,
	isComposite      : isComposite,
	isPrime          : isPrime,
	isEven           : isEven,
	isOdd            : isOdd,
	toInteger        : toInteger,
	toDecimal        : toDecimal,
	toFixed          : toFixed,
	toOrdinal        : toOrdinal,
	cycle            : cycle,
	limit            : limit,
	acosh            : acosh,
	cosh             : cosh,
	asinh            : asinh,
	sinh             : sinh,
	atanh            : atanh,
	tanh             : tanh,
	cbrt             : cbrt,
	root             : root,
	clz32            : clz32,
	expm1            : expm1,
	hypot            : hypot,
	imul             : imul,
	iadd             : iadd,
	log1p            : log1p,
	log10            : log10,
	log2             : log2,
	average          : average,
	round            : round10,
	floor            : floor10,
	ceil             : ceil10,
	factorial        : factorial,
	fibonacci        : fibonacci,
	memoize          : memoize,
	guid             : guid,
	random           : random10
});



return Arith;
});